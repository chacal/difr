-
  import nl.flotsam.difr._

  def lineTypeOf(lineChange: LineChange) =
    lineChange match {
      case ContextLine(_) => "context"
      case LineAdded(_) => "added"
      case LineRemoved(_) => "removed"
      case _ => ""
    }

  def prefix(lineChange: LineChange) =
    lineChange match {
      case ContextLine(_) => "   "
      case LineAdded(_) => " + "
      case LineRemoved(_) => " - "
    }

  def range(chunk: ChangeChunk) = {
    import chunk.rangeInformation._
    "@@ -" + oldOffset + "," + oldLength + " +" + newOffset + "," + newLength + " @@" + (chunk.changeLines.headOption.map(_.line) match {
      case Some(str) => " " + str
      case None => ""
    })
  }

  def withLineNo(chunk: ChangeChunk): List[(Option[Int], Option[Int], LineChange)] = {
    var first = chunk.rangeInformation.oldOffset
    var second = chunk.rangeInformation.newOffset
    for (changeLine <- chunk.changeLines.tail) yield changeLine match {
      case ContextLine(_) =>
        first += 1
        second += 1
        (Some(first - 1), Some(second - 1), changeLine)
      case LineAdded(_) =>
        second += 1
        (None, Some(second - 1), changeLine)
      case LineRemoved(_) =>
        first += 1
        (Some(first - 1), None, changeLine)
    }
  }

  val style = load("/style-min.css")
  val editorjs = load("/editor-min.js")


-@ val logs: List[GitLog]
-@ val ext: Boolean = false

!!! 5
%html
  %head
    %title Difr
    %meta(charset="utf-8")
    - if (ext)
      %link(href="./style.css" rel="stylesheet")
    - else
      %style(type="text/css")= unescape(style)
    %script#editor(type="text/html")
      %tr.editor
        %td
        %td
        %td
          .form
            %textarea.contents
            %a.cancel
    %script#comments(type="text/html")
      %tr.comments
        %td
        %td
        %td {{comments}}
  %body
    .container
      - for (log <- logs)
        .log
          %span.comment #{log.comment}
          .infoContainer
            %span.author #{log.author}
            %span.date #{log.date}
            %span.commitHash #{log.commitHash}
          - for (diff <- log.diffs; details <- diff.details)
            .diff
              %table
                %tr.meta
                  %td.file(colspan="3")= details.newFile
                - for (chunk <- details.chunks)
                  %tr.chunk
                    %td.lineno.first ...
                    %td.lineno.second ...
                    %td
                      %pre= range(chunk)
                  - for ((first, second, changeLine) <- withLineNo(chunk))
                    %tr.line(class={lineTypeOf(changeLine)})
                      %td.lineno.first= first.map(_.toString)
                      %td.lineno.second= second.map(_.toString)
                      %td
                        %pre= prefix(changeLine) + changeLine.line
    %script(src="http://code.jquery.com/jquery-1.10.1.min.js")
    %script(src="http://cdnjs.cloudflare.com/ajax/libs/ICanHaz.js/0.10/ICanHaz.min.js")
    - if (ext)
      %script(src="./editor.js")
    - else
      %script
        - unescape(editorjs)

